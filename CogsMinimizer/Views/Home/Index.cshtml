@model CogsMinimizer.Models.HomeIndexViewModel
@{
    ViewBag.Title = "Home Page";
}
<style>
    .red_txt
    {
        color:red;
    }
</style>
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script>
    // In addition to calling controller action buttons click will cause setting cursor to wait while being over body and buttons
    $(document).ready(function () {
        $('.wait-crs').on('click', function () { $('body').css('cursor', 'wait'); $('.btn').css('cursor', 'wait'); })
    });

    function CheckSubscriptionConnectDate(btn)
    {
        var href = $(btn).prop("href");
        var connTimeHoursMatches = href.match(/ConnectedTime=([0-9]*)/);
        var connTimeHours = connTimeHoursMatches[1]

        if (connTimeHours <= 24)
        {
            alert("This subscription has not been analyzed yet. Please check back tomorrow. If the problem persists, then contact support.");
        }
    }

</script>
<div class="jumbotron">
    <h1>SubMinimizer</h1>
    <p class="lead">Helps you detect and delete the idle resources in your Azure subscriptions and save money.</p>
    <p><a href="https://github.com/shklar/CogsMinimizer" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
</div>

<div class="row">
    @if (!Request.IsAuthenticated)
    {
        <div class="col-lg-4 thumbnail">
            <div class="caption">
                <h3>Sign-in to  monitor your Azure Subscription</h3>
                <div id="org"><a href='@Url.Action("SignIn", "Account")'><img src="~/Images/org.png" style="height:65px;width:350px;margin:0px" class="img-thumbnail" /></a></div>
            </div>
        </div>
    }
    else if (Model != null)
    {
        <table class="table table-striped table-condensed table-hover">
            <tr>
                <td>
                    <h4>Azure Subscription</h4>
                </td>
                <td>
                    <h4>Actions</h4>
                </td>
                <td>
                    <h4>Statistics</h4>
                </td>
                <td>
                    <h4>Monitoring</h4>
                </td>
            </tr>
            @foreach (KeyValuePair<string, CogsMinimizer.Shared.Subscription> entry in Model.UserSubscriptions.OrderByDescending(x => x.Value.IsConnected).ThenBy(x => x.Value.DisplayName))
            {
                var subscription = entry.Value as CogsMinimizer.Shared.Subscription;
                <tr>
                    <td>
                        @subscription.DisplayName
                        <br />
                        &nbsp;&nbsp;<small>Subscription Id: @subscription.Id</small>
                        <!--
                         <br />
                         &nbsp;&nbsp;<small>Organization Id: @subscription.OrganizationId</small>
                        -->
                    </td>
                    <td>
                        @if (subscription.IsConnected)
                        {

                            if (Model.UserCanManageAccessForSubscriptions.Contains(@subscription.Id))
                            {
                                @Html.ActionLink("View resources", "Analyze", "Subscription",
                               new
                               {
                                   Id = @subscription.Id,
                                   OrganizationId = @subscription.OrganizationId,
                                   DisplayName = @subscription.DisplayName,
                                   ConnectedTime = (DateTime.Now - @subscription.ConnectedOn).TotalHours
                               },
                               new { @class = "btn btn-success btn-xs wait-crs", onclick = "javascript: CheckSubscriptionConnectDate(this); return true;" })

                                <small>&nbsp;&nbsp;</small>

                                @Html.ActionLink("Settings", "GetSettings", "Subscription",
                               new
                               {
                                   subscriptionId = @subscription.Id
                               },
                               new { @class = "btn btn-warning btn-xs wait-crs" })

                                if (@subscription.ConnectedBy == User.Identity.Name)
                                {
                                    <small>&nbsp;&nbsp;</small>

                                    @Html.ActionLink("Stop monitoring", "Disconnect", "Subscription",
                                        new
                                        {
                                            Id = @subscription.Id,
                                            OrganizationId = @subscription.OrganizationId,
                                            ServicePrincipalObjectId = Model.UserOrganizations[@subscription.OrganizationId].objectIdOfCloudSenseServicePrincipal
                                        },
                                             new { @class = "btn btn-danger btn-xs wait-crs" })
                                }
                            }
                            if (@subscription.AzureAccessNeedsToBeRepaired)
                            {
                                <br />
                                <small>&nbsp;&nbsp; Azure access needs to be repaired: </small>
                                @Html.ActionLink("Repair", "RepairAccess", "Subscription",
                               new
                               {
                                   Id = @subscription.Id,
                                   OrganizationId = @subscription.OrganizationId,
                                   ServicePrincipalObjectId = Model.UserOrganizations[@subscription.OrganizationId].objectIdOfCloudSenseServicePrincipal
                               },
                                    new { @class = "btn btn-info btn-xs wait-crs" })
                            }
                        }
                        else
                        {
                            if (Model.UserCanManageAccessForSubscriptions.Contains(@subscription.Id))
                            {


                                @Html.ActionLink("Monitor", "Connect", "Subscription",
                               new
                               {
                                   Id = @subscription.Id,
                                   OrganizationId = @subscription.OrganizationId,
                                   DisplayName = @subscription.DisplayName,
                                   ServicePrincipalObjectId = Model.UserOrganizations[@subscription.OrganizationId].objectIdOfCloudSenseServicePrincipal
                               },
                               new { @class = "btn btn-info btn-xs wait-crs" })
                            }
                        }
                        @if (!Model.UserCanManageAccessForSubscriptions.Contains(@subscription.Id))
                        {
                            <text>(You do not have the required access for this subscription.)</text>
                        }
                    </td>
                    <td>
                        @if (Model.UserCanManageAccessForSubscriptions.Contains(@subscription.Id) && subscription.IsConnected)
                        {
                            <div>Total resources: @Model.Resources.Where(r => r.SubscriptionId == subscription.Id).Count()</div>
                            if (Model.Resources.Where(r => (r.SubscriptionId == subscription.Id && r.Status == CogsMinimizer.Shared.ResourceStatus.Expired)).Count() > 0)
                            {
                                <div class="red_txt">Expired resources: @Model.Resources.Where(r => (r.SubscriptionId == subscription.Id && r.Status == CogsMinimizer.Shared.ResourceStatus.Expired)).Count()</div>
                            }
                            else
                            {
                                <div>Expired resources: @Model.Resources.Where(r => r.SubscriptionId == subscription.Id && r.Status == CogsMinimizer.Shared.ResourceStatus.Expired).Count()</div>
                            }
                        }
                    </td>
                    <td>
                        @if (Model.UserCanManageAccessForSubscriptions.Contains(@subscription.Id) && subscription.IsConnected)
                        {
                            <div>Started by: @subscription.ConnectedBy </div>
                            <div>Started on: @subscription.ConnectedOn </div>
                        }
                    </td>
                </tr>
            }
        </table>
        if (Model.DisconnectedUserOrganizations.Count > 0)
        {
            <div class="alert alert-warning" role="alert">
                <h4> Didn't find the Azure subscription that you want to monitor? </h4>
                <h5>
                    It could be in the @Model.DisconnectedUserOrganizations.Count other Organization(s) of which you're a member.
                    Click here to connect to all your Organizations (you will need to provide consent for each).
                </h5>
            </div>
        }
        <div>
            @Html.ActionLink("Register subscription", "Register", "Subscription",
            new { },
           new { @class = "btn btn-primary btn-md" })
        </div>
    }
</div>