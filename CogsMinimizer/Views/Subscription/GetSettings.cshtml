@model CogsMinimizer.Shared.Subscription
@{
    ViewBag.Title = "Settings";
    
}
  
@{ 
    List<SelectListItem> managementLevelList = new List<SelectListItem>();
    managementLevelList.Add(
        new SelectListItem
        {
            Text = "Report only",
            Value = "0"
        });
<!--
    managementLevelList.Add(
new SelectListItem
{
    Text = "Manual delete",
    Value = "1"
});
-->

    managementLevelList.Add(
new SelectListItem
{
    Text = "Automatic delete",
    Value = "2"
});
}


@section Scripts
{
    <!-- all dependency scripts will be loaded here -->
    @Scripts.Render("~/bundles/jquery")
<script>
    // In addition to calling controller action buttons click will cause setting cursor to wait while being over body and buttons
    $(document).ready(function () {
        $('.wait-crs').on('click', function () { $('body').css('cursor', 'wait'); $('.btn').css('cursor', 'wait'); })
    });

</script>
}

@using (@Html.BeginForm("SaveSettings", "Subscription",
    new
    {
        ServicePrincipalObjectId = ViewData["ServicePrincipalObjectId"]
    },

    FormMethod.Post))
{
    <h1>@ViewBag.Title</h1>
 
    <!-- make 2 text boxes for some subscription data value and user ID. otherwise neither subscription data nor user ID  aren't given to submitting controller method -->
    <h4>@Html.TextBoxFor(m => m.DisplayName, new { contenteditable = "false", style = "display : none" })</h4>
    <h4>@Html.TextBoxFor(m => m.Id, new { contenteditable = "false", style = "display : none" })</h4>
    <table class="table table-striped table-condensed table-hover">
        <tr>
            <td>
                <h4>Subscription name</h4>
            </td>
            <td>
                <h4>@Model.DisplayName</h4>
        </td>
    </tr>
        <tr>
            <td>
                <h4>Subscription ID</h4>
            </td>
            <td>
                <h4>@Model.Id</h4>
            </td>
        </tr>
        <tr>
            <td>
                <h4>Reserving resource extends its expiration to (days)</h4>
            </td>
            <td style="vertical-align:middle">
                @Html.TextBoxFor(m => m.ReserveIntervalInDays)
            </td>
        </tr>
        <tr>
            <td>
                <h4>Claimed resources expire after (days)</h4>
            </td>
            <td style="vertical-align:middle">
                @Html.TextBoxFor(m => m.ExpirationIntervalInDays)
            </td>
        </tr>
        <tr>
            <td>
                <h4>Unclaimed resources expire after (days)</h4>
            </td>
            <td style="vertical-align:middle">
                @Html.TextBoxFor(m => m.ExpirationUnclaimedIntervalInDays, null, new { @class = "spinnerTxt"})
            </td>
        </tr>
        <tr>
            <td>
                <h4>Delete expired resource after (days)</h4>
            </td>
            <td style="vertical-align:middle">
                @Html.TextBoxFor(m => m.DeleteIntervalInDays)
            </td>
        </tr>
       <tr>
            <td>
                <h4>Management level (action when resource expires)</h4>
            </td>
           <td style="vertical-align:middle">
                @Html.DropDownListFor(m => m.ManagementLevel, managementLevelList)
            </td>
        </tr>
        <tr>
            <td><h1>Report options (mails are sent daily)</h1></td>
        </tr>
        <tr>
            <td>
                <h4>Send mail only if invalid resources found</h4>
            </td>
            <td style="vertical-align:middle">
                @Html.CheckBoxFor(m => m.SendEmailOnlyInvalidResources)
            </td>
        </tr>
        <tr>
            <td>
                <h4>Send mail to co-admins</h4>
            </td>
            <td style="vertical-align:middle">
                @Html.CheckBoxFor(m => m.SendEmailToCoAdmins)
            </td>
        </tr>
  </table>
<table>
    <tr>
        @if (Model.ConnectedBy == User.Identity.Name)
        {
            <td>
                <button class="btn btn-success btn-xs wait-crs" type="submit">Save</button>
                <small>&nbsp;&nbsp;</small>
            </td>
            <td>
                @Html.ActionLink("Cancel", "CancelGetSettings", "Subscription",
            null, new { @class = "btn btn-warning btn-xs wait-crs" })
            </td>
        }
        else
        {
        <td>
            @Html.ActionLink("Close", "CancelGetSettings", "Subscription",
            null, new { @class = "btn btn-warning btn-xs wait-crs" })
        </td>
}
    </tr>
</table>
}

